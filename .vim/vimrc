
" Stolen from garybernhardt/dotfiles/.vimrc
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col
        return "\<tab>"
    endif

    let char = getline('.')[col - 1]
    if char =~ '\k'
        " There's an identifier before the cursor, so complete the identifier.
        return "\<c-p>"
    else
        return "\<tab>"
    endif
endfunction
inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>



" Disable automatically adding comments to the next line
autocmd FileType * set formatoptions-=c formatoptions-=r formatoptions-=o
" Allow recursive find
set path+=**

" Allows %% in command mode to fill in the directory of the buffer
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Unbind some useless/annoying default key bindings.
nmap Q <Nop> " 'Q' in normal mode enters Ex mode. You almost never want this.

" No large banner at the top of netwr
let g:netrw_banner=0
" Adds command DiffOrig to compare changes in buffer
" command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
      "\ | wincmd p | diffthis

" Install Vim Plug if needed
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()


if has('nvim')
    " figure out how to do a conditional the other way
else
    " vim settings that we don't want to use for neovim
    Plug 'pangloss/vim-javascript'
    Plug 'leafgarland/typescript-vim'
    Plug 'kchmck/vim-coffee-script'
    Plug 'maxmellon/vim-jsx-pretty'
    " Plug 'mxw/vim-jsx'

    " Asynchronous Lint Engine - linting and type checks
    Plug 'dense-analysis/ale'
    " ALE options
    let g:ale_linters = {'javascript': ['eslint'], 'typescript': ['tsserver', 'eslint'], 'typescript.tsx': ['tsserver', 'eslint'], 'coffee': ['coffeelint']}
    let g:ale_fixers = {'javascript': ['eslint'], 'typescript': ['prettier'], 'typescript.tsx': ['prettier']}
    let g:ale_open_list = 0
    let g:ale_lint_on_text_changed = 'normal'
    let g:ale_lint_on_insert_leave = 1
    let g:ale_lint_delay = 0
    let g:ale_set_quickfix = 0
    let g:ale_set_loclist = 1
    let g:ale_hover_cursor = 1
    let g:ale_floating_preview = 1
    let g:ale_set_balloons = 1
    let g:ale_floating_window_border = []
    let g:ale_sign_column_always = 1
    let g:ale_cursor_detail = 0
    let g:ale_hover_to_floating_preview = 1
    let g:ale_detail_to_floating_preview = 1
    " Mappings from Modern Vim to move through warnings/errors
    nmap <silent> [W <Plug>(ale_first)
    nmap <silent> [w <Plug>(ale_previous)
    nmap <silent> ]w <Plug>(ale_next)
    nmap <silent> ]W <Plug>(ale_last)
    " Mappings for other ALE commands
    nmap gd <Plug>(ale_go_to_definition)
    nmap gr <Plug>(ale_find_references)
    nmap <Leader>d <Plug>(ale_detail)
    nmap <Leader>h <Plug>(ale_hover)
    nmap <Leader>r <Plug>(ale_rename)

endif

call plug#end()
